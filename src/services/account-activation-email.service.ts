import { simpleNotificationService } from './simple-notifications.service';
import { COLLECTIONS } from '@/lib/constants';
import { configService } from '@/lib/config';
import { db } from '@/lib/firebase';
import { doc, getDoc } from 'firebase/firestore';
import { handleError } from '@/lib/error-handler';
import { emailVerificationTokenService } from './email-verification-token.service';

export interface AccountActivationEmailData {
  socioName: string;
  socioEmail: string;
  temporaryPassword: string;
  asociacionName: string;
  asociacionEmail?: string;
  numeroSocio?: string;
  loginUrl: string;
  verificationToken?: string; // NUEVO: Token de verificaci√≥n
  verificationUrl?: string; // NUEVO: URL completa con token
}

export interface ActivationEmailResult {
  success: boolean;
  error?: string;
}

class AccountActivationEmailService {
  
  /**
   * Genera el contenido del email de activaci√≥n de cuenta
   * ACTUALIZADO: Ahora incluye link corto de verificaci√≥n
   */
  private generateActivationEmailContent(data: AccountActivationEmailData): {
    subject: string;
    message: string;
  } {
    const subject = `¬°Bienvenido a ${data.asociacionName}! - Activa tu cuenta en Fidelya`;
    
    // NUEVO: Priorizar link de verificaci√≥n si est√° disponible
    const activationLink = data.verificationUrl || data.loginUrl;
    
    const message = `
¬°Hola ${data.socioName}!

¬°Te damos la bienvenida a **${data.asociacionName}**! üéâ

Tu cuenta en Fidelya ha sido creada exitosamente. 

${data.numeroSocio ? `üë§ **N√∫mero de socio:** ${data.numeroSocio}\n` : ''}
üìß **Email:** ${data.socioEmail}

**üîê ACTIVA TU CUENTA CON UN SOLO CLIC:**

Haz clic en el siguiente enlace para activar tu cuenta autom√°ticamente:

üîó **${activationLink}**

Este enlace es v√°lido por 48 horas y solo puede usarse una vez.

---

**M√âTODO ALTERNATIVO - Activaci√≥n manual:**

Si prefieres, tambi√©n puedes activar tu cuenta manualmente usando estas credenciales:

üîë **Contrase√±a temporal:** ${data.temporaryPassword}
üîó **Acceder manualmente:** ${data.loginUrl}

**IMPORTANTE:** Por tu seguridad, te recomendamos cambiar tu contrase√±a temporal en tu primer acceso.

---

**¬øQu√© puedes hacer con tu cuenta?**
‚úÖ Ver y usar beneficios exclusivos de tu asociaci√≥n
‚úÖ Validar descuentos con c√≥digos QR
‚úÖ Consultar tu historial de beneficios utilizados
‚úÖ Mantener actualizada tu informaci√≥n personal

**¬øNecesitas ayuda?**
Si tienes alguna pregunta o problema para acceder, puedes contactar a:
- Tu asociaci√≥n: ${data.asociacionEmail || 'Contacta directamente con tu asociaci√≥n'}
- Soporte t√©cnico de Fidelya: soporte@fidelya.com.ar

¬°Esperamos que disfrutes de todos los beneficios que **${data.asociacionName}** tiene para ti!

---
Saludos cordiales,
El equipo de Fidelya üíô

*Este es un email autom√°tico, por favor no respondas a esta direcci√≥n.*
    `.trim();

    return { subject, message };
  }

  /**
   * Genera la URL de verificaci√≥n con token corto
   * NUEVO: M√©todo para generar URL con token
   */
  private getVerificationUrl(token: string): string {
    const baseUrl = configService.getAuthUrl();
    return `${baseUrl}/auth/activate-account?t=${token}`;
  }

  /**
   * Obtiene informaci√≥n de la asociaci√≥n
   * CORREGIDO: Usar nombreAsociacion en lugar de nombre
   */
  private async getAsociacionInfo(asociacionId: string): Promise<{
    nombre: string;
    email?: string;
  } | null> {
    try {
      console.log(`üîç Obteniendo informaci√≥n de asociaci√≥n: ${asociacionId}`);
      const asociacionDoc = await getDoc(doc(db, COLLECTIONS.ASOCIACIONES, asociacionId));
      
      if (!asociacionDoc.exists()) {
        console.warn(`‚ùå Asociaci√≥n no encontrada: ${asociacionId}`);
        return null;
      }

      const data = asociacionDoc.data();
      console.log(`üìã Datos de asociaci√≥n obtenidos:`, {
        nombreAsociacion: data.nombreAsociacion,
        nombre: data.nombre,
        email: data.email
      });

      // CORREGIDO: Usar nombreAsociacion como campo principal, con fallback a nombre
      const nombreAsociacion = data.nombreAsociacion || data.nombre || 'Tu Asociaci√≥n';
      
      console.log(`‚úÖ Nombre de asociaci√≥n a usar: ${nombreAsociacion}`);

      return {
        nombre: nombreAsociacion,
        email: data.email
      };
    } catch (error) {
      console.error('‚ùå Error obteniendo informaci√≥n de asociaci√≥n:', error);
      return null;
    }
  }

  /**
   * Genera la URL de login usando el servicio de configuraci√≥n
   * Autom√°ticamente maneja desarrollo vs producci√≥n
   */
  private getLoginUrl(): string {
    const baseUrl = configService.getAuthUrl();
    return `${baseUrl}/auth/login`;
  }

  /**
   * Env√≠a el email de activaci√≥n de cuenta a un nuevo socio
   * ACTUALIZADO: Ahora incluye link corto con token de verificaci√≥n
   */
  async sendAccountActivationEmail(
    socioName: string,
    socioEmail: string,
    temporaryPassword: string,
    asociacionId: string,
    userId: string, // NUEVO: userId para generar token
    numeroSocio?: string
  ): Promise<ActivationEmailResult> {
    try {
      console.log(`üìß Preparando email de activaci√≥n para: ${socioName} (${socioEmail})`);
      console.log(`üè¢ Asociaci√≥n ID: ${asociacionId}`);
      console.log(`üë§ Usuario ID: ${userId}`);

      // Obtener informaci√≥n de la asociaci√≥n
      const asociacionInfo = await this.getAsociacionInfo(asociacionId);
      
      if (!asociacionInfo) {
        console.error(`‚ùå No se pudo obtener informaci√≥n de la asociaci√≥n: ${asociacionId}`);
        return {
          success: false,
          error: 'No se pudo obtener informaci√≥n de la asociaci√≥n'
        };
      }

      console.log(`‚úÖ Informaci√≥n de asociaci√≥n obtenida:`, {
        nombre: asociacionInfo.nombre,
        email: asociacionInfo.email
      });

      // NUEVO: Generar token de verificaci√≥n de email
      console.log(`üîê Generando token de verificaci√≥n de email...`);
      const tokenResult = await emailVerificationTokenService.createVerificationToken(
        userId,
        socioEmail,
        'socio',
        48 // 48 horas de expiraci√≥n
      );

      if (!tokenResult.success || !tokenResult.token) {
        console.error(`‚ùå Error generando token de verificaci√≥n:`, tokenResult.error);
        return {
          success: false,
          error: 'Error generando token de verificaci√≥n'
        };
      }

      console.log(`‚úÖ Token de verificaci√≥n generado: ${tokenResult.token}`);

      // Preparar datos para el email con el link corto
      const emailData: AccountActivationEmailData = {
        socioName,
        socioEmail,
        temporaryPassword,
        asociacionName: asociacionInfo.nombre,
        asociacionEmail: asociacionInfo.email,
        numeroSocio,
        loginUrl: this.getLoginUrl(),
        verificationToken: tokenResult.token, // NUEVO: Incluir token
        verificationUrl: this.getVerificationUrl(tokenResult.token) // NUEVO: URL con token
      };

      console.log(`üîó URL de activaci√≥n generada: ${emailData.loginUrl}`);
      console.log(`üîó URL de verificaci√≥n con token: ${emailData.verificationUrl}`);
      console.log(`üåç Entorno: ${configService.isDevelopment() ? 'desarrollo' : 'producci√≥n'}`);

      // Generar contenido del email
      const { subject, message } = this.generateActivationEmailContent(emailData);

      console.log(`üìß Contenido del email generado:`);
      console.log(`   üìã Subject: ${subject}`);
      console.log(`   üìù Message preview: ${message.substring(0, 200)}...`);

      // Crear un destinatario temporal para el servicio de notificaciones
      const tempRecipient = {
        id: socioEmail,
        name: socioName,
        email: socioEmail,
        type: 'socio' as const
      };

      // Preparar datos de notificaci√≥n
      const notificationData = {
        title: subject,
        message: message,
        type: 'info' as const,
        channels: ['email' as const],
        recipientIds: [socioEmail],
        businessName: asociacionInfo.nombre // Usar el nombre correcto de la asociaci√≥n
      };

      console.log(`üì§ Datos de notificaci√≥n preparados:`, {
        title: notificationData.title,
        messageLength: notificationData.message.length,
        channels: notificationData.channels,
        recipientIds: notificationData.recipientIds,
        businessName: notificationData.businessName
      });

      // Sobrescribir temporalmente el m√©todo getRecipients
      const originalGetRecipients = simpleNotificationService.getRecipients;
      simpleNotificationService.getRecipients = async () => [tempRecipient];

      // Sobrescribir temporalmente el m√©todo sendEmail para pasar el nombre de la asociaci√≥n
      const originalSendEmail = simpleNotificationService['emailService'].sendEmail;
      simpleNotificationService['emailService'].sendEmail = async (to: string, subject: string, message: string) => {
        console.log(`üìß Enviando email con nombre de asociaci√≥n: ${asociacionInfo.nombre}`);
        return originalSendEmail.call(simpleNotificationService['emailService'], to, subject, message, asociacionInfo.nombre);
      };

      try {
        // Crear y enviar la notificaci√≥n
        const notificationId = await simpleNotificationService.createNotification(
          notificationData,
          'system-activation'
        );

        console.log(`üìù Notificaci√≥n creada con ID: ${notificationId}`);

        const result = await simpleNotificationService.sendNotification(
          notificationId,
          notificationData
        );

        console.log(`üìä Resultado del env√≠o:`, {
          success: result.success,
          sentCount: result.sentCount,
          failedCount: result.failedCount,
          errorsCount: result.errors.length
        });

        // Restaurar los m√©todos originales
        simpleNotificationService.getRecipients = originalGetRecipients;
        simpleNotificationService['emailService'].sendEmail = originalSendEmail;

        if (result.success && result.sentCount > 0) {
          console.log(`‚úÖ Email de activaci√≥n enviado exitosamente a: ${socioEmail}`);
          console.log(`üè¢ Con nombre de asociaci√≥n: ${asociacionInfo.nombre}`);
          return {
            success: true
          };
        } else {
          console.error(`‚ùå Error enviando email de activaci√≥n:`, result.errors);
          return {
            success: false,
            error: result.errors.length > 0 ? result.errors.join(', ') : 'Error desconocido al enviar email'
          };
        }

      } catch (sendError) {
        // Restaurar los m√©todos originales en caso de error
        simpleNotificationService.getRecipients = originalGetRecipients;
        simpleNotificationService['emailService'].sendEmail = originalSendEmail;
        throw sendError;
      }

    } catch (error) {
      console.error('üí• Error cr√≠tico enviando email de activaci√≥n:', error);
      handleError(error, 'Send Account Activation Email');
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Error desconocido'
      };
    }
  }

  /**
   * Env√≠a email de activaci√≥n con reintentos
   * ACTUALIZADO: Ahora requiere userId para generar token
   */
  async sendAccountActivationEmailWithRetry(
    socioName: string,
    socioEmail: string,
    temporaryPassword: string,
    asociacionId: string,
    userId: string, // NUEVO: userId requerido
    numeroSocio?: string,
    maxRetries: number = 3
  ): Promise<ActivationEmailResult> {
    let lastError: string = '';
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      console.log(`üìß Intento ${attempt}/${maxRetries} - Enviando email de activaci√≥n a: ${socioEmail}`);
      
      const result = await this.sendAccountActivationEmail(
        socioName,
        socioEmail,
        temporaryPassword,
        asociacionId,
        userId, // NUEVO: Pasar userId
        numeroSocio
      );

      if (result.success) {
        if (attempt > 1) {
          console.log(`‚úÖ Email enviado exitosamente en el intento ${attempt}`);
        }
        return result;
      }

      lastError = result.error || 'Error desconocido';
      
      if (attempt < maxRetries) {
        console.log(`‚ö†Ô∏è Intento ${attempt} fall√≥, reintentando en 2 segundos...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.error(`‚ùå Todos los intentos fallaron. √öltimo error: ${lastError}`);
    return {
      success: false,
      error: `Error despu√©s de ${maxRetries} intentos: ${lastError}`
    };
  }

  /**
   * Verifica el estado de configuraci√≥n del servicio de email
   */
  getServiceStatus() {
    return simpleNotificationService.getServicesStatus();
  }
}

// Export singleton instance
export const accountActivationEmailService = new AccountActivationEmailService();
export default accountActivationEmailService;